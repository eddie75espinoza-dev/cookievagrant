# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  config.vm.define "{{ cookiecutter.vm_define }}" do |machine|
    # Configuración de la máquina virtual
    # Sistema operativo
    machine.vm.box = "ubuntu/{{ cookiecutter.box_name }}"    
    machine.vm.hostname = "{{ cookiecutter.hostname }}" # Establece el nombre del host, ejemplo "ubuntu-<nombre del desarrollador>"
    machine.vm.boot_timeout = 360 # Esto le dará a la máquina virtual más tiempo para arrancar antes de que Vagrant considere que ha fallado
    machine.vm.box_check_update = false # Evita la actualización del box

    # Configuración de red
    machine.vm.network "private_network",
    type: "dhcp", # Esto permite que la IP se asigne mediante DHCP de forma automática
    virtualbox__intnet: true, # Esto es útil para configurar redes privadas dentro de tus máquinas virtuales.
    auto_config: true
    # permite redirigir los puertos de la VM (dispinobles solo de 1 a 65535).
    machine.vm.network "forwarded_port", guest: 80, host: 8080, auto_correct: true
    machine.vm.network "forwarded_port", guest: 5000, host: 5000, auto_correct: true
    machine.vm.network "forwarded_port", guest: 8000, host: 8000, auto_correct: true
    machine.vm.network "forwarded_port", guest: 5432, host: 5432, id: "pgsql", auto_correct: true

    # Configuración del proveedor
    machine.vm.provider "{{ cookiecutter.provider }}" do |vb|
      vb.name = "{{ cookiecutter.vb_name }}"
      vb.memory = {{ cookiecutter.memory }}
      vb.cpus = {{ cookiecutter.processors }}
      vb.customize ["createhd", "--filename", "{{ cookiecutter.vb_name }}_disk", "--size", {{ cookiecutter.disk_size.replace('gb', '').replace('Gb', '').replace('GB', '') }}]
    end

    # Provisión de la máquina virtual
    machine.vm.provision "shell", inline: <<-SHELL
      # Actualizar paquetes
      apt-get update && apt-get upgrade -y && apt-get install -y build-essential libssl-dev libffi-dev libpq-dev gcc

      # Instalar dependencias
      apt-get install -y apt-transport-https ca-certificates curl software-properties-common

      # Instalar Docker
      curl -fsSL https://get.docker.com -o get-docker.sh
      sh get-docker.sh
      usermod -aG docker $USER

      # Instalar Docker Compose
      DOCKER_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep -Po '"tag_name": \"\K.*?(?=\")')
      curl -L "https://github.com/docker/compose/releases/download/$DOCKER_COMPOSE_VERSION/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
      chmod +x /usr/local/bin/docker-compose

      # Instalar PostgreSQL
      sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
      wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -
      apt-get update
      apt-get install -y postgresql-14

      # Instalar Nginx
      apt-get install -y nginx=1.18.0-0ubuntu1

      # Instalar Node.js versión específica
      NODE_VERSION={{ cookiecutter.node_version }}
      curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION}.x | bash -
      apt-get install -y nodejs

      # Instalar Git
      apt-get install -y git

      # Instalar Python y herramientas relacionadas
      apt-get install -y python{{ cookiecutter.python_versions }} python{{ cookiecutter.python_versions }}-dev python{{ cookiecutter.python_versions }}-distutils python{{ cookiecutter.python_versions }}-venv python{{ cookiecutter.python_versions }}-pip

      # Habilitar reenvío del agente SSH
      echo "AllowAgentForwarding yes" >> /etc/ssh/sshd_config
      systemctl restart sshd

      # Añadir el usuario vagrant al grupo de Docker
      sudo usermod -aG docker vagrant
    SHELL
  end
end
